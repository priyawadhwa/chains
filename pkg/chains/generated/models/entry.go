// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2021 The Tekton Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"context"
	"encoding/json"
	"io"
	"io/ioutil"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// Entry entry
//
// swagger:discriminator Entry kind
type Entry interface {
	runtime.Validatable
	runtime.ContextValidatable

	// name of the pod the workload ran on
	// Required: true
	PodName() *string
	SetPodName(*string)

	// base64 encoded SVID signature
	// Required: true
	Signature() *string
	SetSignature(*string)

	// base64 encoded SVID certificate
	// Required: true
	Svid() *string
	SetSvid(*string)

	// AdditionalProperties in base type shoud be handled just like regular properties
	// At this moment, the base type property is pushed down to the subtype
}

type entry struct {
	podNameField *string

	signatureField *string

	svidField *string
}

// PodName gets the pod name of this polymorphic type
func (m *entry) PodName() *string {
	return m.podNameField
}

// SetPodName sets the pod name of this polymorphic type
func (m *entry) SetPodName(val *string) {
	m.podNameField = val
}

// Signature gets the signature of this polymorphic type
func (m *entry) Signature() *string {
	return m.signatureField
}

// SetSignature sets the signature of this polymorphic type
func (m *entry) SetSignature(val *string) {
	m.signatureField = val
}

// Svid gets the svid of this polymorphic type
func (m *entry) Svid() *string {
	return m.svidField
}

// SetSvid sets the svid of this polymorphic type
func (m *entry) SetSvid(val *string) {
	m.svidField = val
}

// UnmarshalEntrySlice unmarshals polymorphic slices of Entry
func UnmarshalEntrySlice(reader io.Reader, consumer runtime.Consumer) ([]Entry, error) {
	var elements []json.RawMessage
	if err := consumer.Consume(reader, &elements); err != nil {
		return nil, err
	}

	var result []Entry
	for _, element := range elements {
		obj, err := unmarshalEntry(element, consumer)
		if err != nil {
			return nil, err
		}
		result = append(result, obj)
	}
	return result, nil
}

// UnmarshalEntry unmarshals polymorphic Entry
func UnmarshalEntry(reader io.Reader, consumer runtime.Consumer) (Entry, error) {
	// we need to read this twice, so first into a buffer
	data, err := ioutil.ReadAll(reader)
	if err != nil {
		return nil, err
	}
	return unmarshalEntry(data, consumer)
}

func unmarshalEntry(data []byte, consumer runtime.Consumer) (Entry, error) {
	buf := bytes.NewBuffer(data)
	buf2 := bytes.NewBuffer(data)

	// the first time this is read is to fetch the value of the kind property.
	var getType struct {
		Kind string `json:"kind"`
	}
	if err := consumer.Consume(buf, &getType); err != nil {
		return nil, err
	}

	if err := validate.RequiredString("kind", "body", getType.Kind); err != nil {
		return nil, err
	}

	// The value of kind is used to determine which type to create and unmarshal the data into
	switch getType.Kind {
	case "Entry":
		var result entry
		if err := consumer.Consume(buf2, &result); err != nil {
			return nil, err
		}
		return &result, nil
	}
	return nil, errors.New(422, "invalid kind value: %q", getType.Kind)
}

// Validate validates this entry
func (m *entry) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePodName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSignature(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSvid(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *entry) validatePodName(formats strfmt.Registry) error {

	if err := validate.Required("podName", "body", m.PodName()); err != nil {
		return err
	}

	return nil
}

func (m *entry) validateSignature(formats strfmt.Registry) error {

	if err := validate.Required("signature", "body", m.Signature()); err != nil {
		return err
	}

	return nil
}

func (m *entry) validateSvid(formats strfmt.Registry) error {

	if err := validate.Required("svid", "body", m.Svid()); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this entry based on context it is used
func (m *entry) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
