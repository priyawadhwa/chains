// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2021 The Tekton Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

package entry

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// AddEntryHandlerFunc turns a function with the right signature into a add entry handler
type AddEntryHandlerFunc func(AddEntryParams) middleware.Responder

// Handle executing the request and returning a response
func (fn AddEntryHandlerFunc) Handle(params AddEntryParams) middleware.Responder {
	return fn(params)
}

// AddEntryHandler interface for that can handle valid add entry params
type AddEntryHandler interface {
	Handle(AddEntryParams) middleware.Responder
}

// NewAddEntry creates a new http.Handler for the add entry operation
func NewAddEntry(ctx *middleware.Context, handler AddEntryHandler) *AddEntry {
	return &AddEntry{Context: ctx, Handler: handler}
}

/* AddEntry swagger:route POST /api/v1/entry entry addEntry

Adds an entry

*/
type AddEntry struct {
	Context *middleware.Context
	Handler AddEntryHandler
}

func (o *AddEntry) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewAddEntryParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
